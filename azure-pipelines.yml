# Starter pipeline
# Pull from Repo
# Import Project into Docekr Jtest CLI container and Run
# Azure YAML docs:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Set Up Project
steps:
- script: |
    echo "Starting Pipeline Execution."
    echo "Create ./temp directory for volume mount."
    mkdir temp
    echo ${PWD}
    echo "Copy Jtest project contents to volume directory."
    cp -R $(jtest.project) temp/.
    
    # Set Up and write .properties file
    echo  -e "\n~~~\nSetting up and creating jtestcli.properties file.\n"
    echo $"
    parasoft.eula.accepted=true
    license.network.auth.enabled=true  
    license.network.password=$(license.server.password)
    license.network.url=$(license.server.url)
    license.network.use.specified.server=true
    license.network.user=admin
    jtest.license.network.edition=custom_edition
    jtest.license.custom_edition_features=Jtest, Static Analysis, Flow Analysis, OWASP Rules, CWE Rules, PCI DSS Rules, DISA STIG Rules, Security Rules, Automation, Desktop Command Line, DTP Publish, Coverage, Unit Test, Unit Test Bulk Creation, Unit Test Tier 1, Unit Test Tier 2, Unit Test Tier 3, Unit Test Tier 4, Unit Test Spring Framework, Change Based Testing
    jtest.license.use_network=true" >> temp/jtestcli.properties
    echo -e "\nDebug -- Verify workspace contents.\n"
    ls -R
    echo -e "\nDebug -- Verify jtestcli.properties file contents."
    cat temp/jtestcli.properties

    # Run Docker container with mount and run tests
    echo -e "\n~~~\nRun SOAtestCLI Docker container & mount ./temp volume.\n"
    
    docker --version

    docker run --rm -it \
    parasoft/jtest bash -c " \
    cd /opt/parasoft/jtest/examples/demo \
    ./gradlew clean jtest-agent test jtest -Djtest.config="builtin://Unit Tests"
    ls -R $(pwd)/temp
  displayName: Run Tests
  env:
    pwd: $(Build.Repository.LocalPath)
  
# Publish Test Results
- task: PublishParasoftTestResults@1
  
  displayName: Publish JTEST Test Results
  inputs:
    testRunner: 'JTEST10x'
    testResultsFiles: '$(Build.Repository.LocalPath)/temp/rep*.xml'
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'process-test-classes jtest:agent test jtest:jtest -Djtest.config="builtin://Unit Tests" -Djacoco.skip=true -Dmaven.test.failure.ignore=true -Djtest.settingsList="/temp/jtestcli.properties" -Djtest.report="/temp"'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
