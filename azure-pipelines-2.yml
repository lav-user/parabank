# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    # Set Up and write .properties file
    echo  -e "\n~~~\nSetting up and creating jtestcli.properties file.\n"
    echo $"
    parasoft.eula.accepted=true
    license.network.auth.enabled=true  
    license.network.password=$(license.server.password)
    license.network.url=$(license.server.url)
    license.network.use.specified.server=true
    license.network.user=admin
    jtest.license.network.edition=custom_edition
    jtest.license.custom_edition_features=Jtest, Static Analysis, Flow Analysis, OWASP Rules, CWE Rules, PCI DSS Rules, DISA STIG Rules, Security Rules, Automation, Desktop Command Line, DTP Publish, Coverage, Unit Test, Unit Test Bulk Creation, Unit Test Tier 1, Unit Test Tier 2, Unit Test Tier 3, Unit Test Tier 4, Unit Test Spring Framework, Change Based Testing
    jtest.license.use_network=true" >> temp/jtestcli.properties
    echo -e "\nDebug -- Verify workspace contents.\n"
    ls -R
    echo -e "\nDebug -- Verify jtestcli.properties file contents."
    cat temp/jtestcli.properties
    docker run --rm -it parasoft/jtest bash \
    cd /opt/parasoft/jtest/examples/demo \
    jtestcli\
    -settings /temp/jtestcli.properties \
    ./gradlew clean jtest-agent test jtest -Djtest.config="builtin://Unit Tests" \

  displayName: 'Run a multi-line script'
